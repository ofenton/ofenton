#!/usr/bin/env python
import getopt
import os
import stashy
import sys

from urlparse import urlparse
 
def main(argv):
    stash_project = ''
    stash_url = ''
    user = ''
    pwd = ''

    try:
        opts, args = getopt.getopt(argv,"hu:p:",["project=","url=","user=","pass="])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit()
        elif opt in ("-u", "--user"):
            user = arg
        elif opt in ("-p", "--pass"):
            pwd = arg
        elif opt in ("--url"):
            stash_url = arg
        elif opt in ("--project"):
            stash_project = arg

    if stash_url == '' or user == '' or pwd == '' or stash_project == '':
        usage()
        sys.exit(2)
    
    local_dir = resolve_base(stash_url) + "/" + stash_project

    print 'Stash URL is ', stash_url
    print 'Stash Project is ', stash_url
    print 'Stash User is ', user
    print 'Stash Password is this long:', len(pwd)
    print 'Local directory is ', local_dir

    # Create local dir for repos
    if not os.path.exists(local_dir):
        os.makedirs(local_dir)

    # Clone stuff
    stash = stashy.connect(stash_url, user, pwd)
    for repo in stash.projects[sys.argv[1]].repos.list():
        for url in repo["links"]["clone"]:
            if (url["name"] == "ssh"):
                os.system("git clone %s" % url["href"])
                break

# Attempt to resolve the base directory (i.e. where to start from) given the hostname
# e.g.
# www.github.com              => github
# www.github.com:80           => github
# www.github.com:80/ofenton   => github
# www.github.com/ofenton      => github
# https://github.com/ofenton  => github
# github                      => github
# www.docs.github.com/ofenton => github
def resolve_base(stash_url):
    # Get git home
    git_home = os.environ['GIT_HOME']

    # Get the hostname
    parsed_uri = urlparse(stash_url)
    hostname = '{uri.hostname}'.format(uri=parsed_uri)

    # No scheme?
    if hostname == 'None':
        hostname = '{uri.scheme}'.format(uri=parsed_uri)

    # No port & no scheme?
    if hostname == '':
        hostname = '{uri.path}'.format(uri=parsed_uri)
        # Remove anything after the first '/'
        sections = hostname.split('/')
        hostname = sections[0]

    # Take the second last element
    sections = hostname.split('.')
    
    if len(sections) == 1:
        hostname = sections[0]
    else:
        hostname= sections[len(sections) - 2]

    base_name = git_home + "/" + hostname
    return base_name
    

def usage():
    print 'stash_clone_all_repos --url <stash_url> --project <stash_project> -u <user> -p <password>'

if __name__ == "__main__":
   main(sys.argv[1:])
